@page "/admin/crashes"
@page "/admin/"
@inherits OwningComponentBase<ICrashRepository>

<table class="table table-sm table-striped table-bordered w-auto">

    <thead>
        <tr>
            <th>Crash ID</th>
            <th>Date</th>
            <th>Severity</th>
        </tr>
    </thead>

    <tbody>
        @if (CrashData?.Count() > 0)
        {
            //List Crashes
            @foreach (CarCrash c in CrashData)
            {
                <tr>
                    <td>@c.crash_id</td>
                    <td>@c.crash_date</td>
                    <td>@c.crash_severity_id</td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(c.crash_id)">Details</NavLink>
                    </td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetEditUrl(c.crash_id)">Edit</NavLink>
                    </td>

                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveCrash(c))"><i class="fa fa-trash"></i>Delete</button>
                    </td>



                </tr>
            }
        }

        else
        {
            <tr>
                <td colspan="5" class="text-center">No Crashes</td>
            </tr>
        }


    </tbody>




</table>

<NavLink class="btn btn-primary" href="/admin/crashes/create">Create</NavLink>



@code {
    public ICrashRepository repo => Service;
    public IEnumerable<CarCrash> CrashData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }


    public async Task UpdateData()
    {
        CrashData = await repo.Crashes.Take(100).ToListAsync();

    }

    public string GetDetailsUrl(long id) => $"/admin/crashes/details/{id}";
    public string GetEditUrl(long id) => $"/admin/crashes/edit/{id}";

    public async Task RemoveCrash(CarCrash c)
    {
        repo.DeleteCrash(c);
        await UpdateData();
    }


}
